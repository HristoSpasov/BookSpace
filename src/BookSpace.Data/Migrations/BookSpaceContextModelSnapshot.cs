// <auto-generated />
using BookSpace.Data;
using BookSpace.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BookSpace.Data.Migrations
{
    [DbContext(typeof(BookSpaceContext))]
    partial class BookSpaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookSpace.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.AuthorDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.Author", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.BookAuthor", b =>
                {
                    b.Property<string>("AuthorId");

                    b.Property<string>("BookId");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAuthors");
                });

            modelBuilder.Entity("BookSpace.Models.BookDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.Book", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("BookId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverUrl");

                    b.Property<string>("Isbn");

                    b.Property<DateTime?>("PublicationYear");

                    b.Property<decimal>("Rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

<<<<<<< HEAD
=======
            modelBuilder.Entity("BookSpace.Models.BookAuthor", b =>
                {
                    b.Property<string>("AuthorId");

                    b.Property<string>("BookId");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAuthors");
                });

>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
            modelBuilder.Entity("BookSpace.Models.BookGenre", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("GenreId");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenresBooks");
                });

            modelBuilder.Entity("BookSpace.Models.BookTag", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("TagId");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BooksTags");
                });

            modelBuilder.Entity("BookSpace.Models.BookUser", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("UserId");

<<<<<<< HEAD
                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);
=======
                    b.Property<int>("State");
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BooksUsers");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.CommentDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.Comment", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookId");

<<<<<<< HEAD
                    b.Property<string>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .IsUnicode(true);

=======
                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<DateTime>("Date");

                    b.Property<string>("UserId");

>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.GenreDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.Genre", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.TagDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.Tag", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("TagId")
                        .ValueGeneratedOnAdd();

<<<<<<< HEAD
=======
                    b.Property<string>("Value");

>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.UserAccessControlDBModel", b =>
=======
            modelBuilder.Entity("BookSpace.Models.UserAccessControl", b =>
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                {
                    b.Property<string>("UserId");

                    b.Property<DateTime>("BanEndTime")
                        .ValueGeneratedOnAdd()
<<<<<<< HEAD
                        .HasDefaultValue(new DateTime(2018, 4, 26, 11, 32, 57, 779, DateTimeKind.Local));

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 26, 11, 32, 57, 779, DateTimeKind.Local));

                    b.Property<DateTime>("LockOutEndTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 26, 11, 32, 57, 779, DateTimeKind.Local));

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 26, 11, 32, 57, 776, DateTimeKind.Local));
=======
                        .HasDefaultValue(new DateTime(2018, 4, 27, 17, 21, 22, 994, DateTimeKind.Local));

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 27, 17, 21, 22, 993, DateTimeKind.Local));

                    b.Property<DateTime>("LockOutEndTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 27, 17, 21, 22, 994, DateTimeKind.Local));

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 4, 27, 17, 21, 22, 989, DateTimeKind.Local));
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec

                    b.HasKey("UserId");

                    b.ToTable("UserAccessControl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookSpace.Models.BookAuthor", b =>
                {
<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.AuthorDBModel", "Author")
=======
                    b.HasOne("BookSpace.Models.Author", "Author")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.BookDBModel", "Book")
=======
                    b.HasOne("BookSpace.Models.Book", "Book")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookSpace.Models.BookGenre", b =>
                {
<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.BookDBModel", "Book")
=======
                    b.HasOne("BookSpace.Models.Book", "Book")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.GenreDBModel", "Genre")
=======
                    b.HasOne("BookSpace.Models.Genre", "Genre")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("GenreBooks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookSpace.Models.BookTag", b =>
                {
<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.BookDBModel", "Book")
=======
                    b.HasOne("BookSpace.Models.Book", "Book")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.TagDBModel", "Tag")
=======
                    b.HasOne("BookSpace.Models.Tag", "Tag")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("TagBooks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookSpace.Models.BookUser", b =>
                {
<<<<<<< HEAD
                    b.HasOne("BookSpace.Models.BookDBModel", "Book")
=======
                    b.HasOne("BookSpace.Models.Book", "Book")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("BookUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookSpace.Models.ApplicationUser", "User")
<<<<<<< HEAD
                        .WithMany("Books")
=======
                        .WithMany("BookUsers")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.CommentDBModel", b =>
                {
                    b.HasOne("BookSpace.Models.BookDBModel", "Book")
=======
            modelBuilder.Entity("BookSpace.Models.Comment", b =>
                {
                    b.HasOne("BookSpace.Models.Book", "Book")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .WithMany("Comments")
                        .HasForeignKey("BookId");

                    b.HasOne("BookSpace.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

<<<<<<< HEAD
            modelBuilder.Entity("BookSpace.Models.UserAccessControlDBModel", b =>
                {
                    b.HasOne("BookSpace.Models.ApplicationUser", "User")
                        .WithOne("UserAccessControl")
                        .HasForeignKey("BookSpace.Models.UserAccessControlDBModel", "UserId")
=======
            modelBuilder.Entity("BookSpace.Models.UserAccessControl", b =>
                {
                    b.HasOne("BookSpace.Models.ApplicationUser", "User")
                        .WithOne("UserAccessControl")
                        .HasForeignKey("BookSpace.Models.UserAccessControl", "UserId")
>>>>>>> 280e0ded4b43c1723fcd4027699ec9ba290e71ec
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookSpace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookSpace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookSpace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookSpace.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
